{"version":3,"sources":["Node/Node.jsx","util/toGraph.js","util/dijkstra.js","ControlPanel/ControlPanel.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["Node","this","props","name","isPath","isWall","onMouseDown","onMouseUp","row","col","onMouseEnter","wall","tabIndex","role","id","className","React","PureComponent","toGraph","nodeArray","graph","i","length","j","nodeName","neighbors","top","bottom","left","right","closestNode","distances","visited","shortest","Object","keys","forEach","node","includes","dijkstras","start","target","undefined","Infinity","assign","parents","child","currentNode","distance","children","childrenArr","newDistance","push","shortestPath","parent","reverse","ControlPanel","state","colStart","colEnd","rowStart","rowEnd","handleInputChange","bind","handleSubmit","e","setState","value","visualize","preventDefault","isButtonDisabled","type","max","min","onChange","onClick","disabled","Component","createNode","graphWithAddedRemovedWall","nodes","newNodes","App","isMouseDown","handleOnMouseDown","handleOnMouseEnter","handleOnMouseUp","getInitialNodes","int","setInterval","document","getElementsByClassName","clearInterval","getElementById","removeVisited","path","setTimeout","animate","disableUntilAnimationFinishes","map","l","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd8a5f93.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/mouse-events-have-key-events, jsx-a11y/control-has-associated-label */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Node.css\";\n\nclass Node extends React.PureComponent {\n    render() {\n        const {\n            name,\n            isPath,\n            isWall,\n            onMouseDown,\n            onMouseUp,\n            row,\n            col,\n            onMouseEnter,\n        } = this.props;\n        const wall = isWall ? \"wall\" : \"\";\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            />\n        );\n    }\n}\n\nNode.propTypes = {\n    name: PropTypes.string.isRequired,\n    isPath: PropTypes.bool.isRequired,\n    row: PropTypes.string.isRequired,\n    col: PropTypes.string.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n    isWall: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n};\n\nexport default Node;\n","// [List-of Node] => Graph\nconst toGraph = (nodeArray) => {\n    const graph = {};\n    for (let i = 0; i < nodeArray.length; i += 1) {\n        for (let j = 0; j < nodeArray[i].length; j += 1) {\n            if (!nodeArray[i][j].isWall) {\n                const nodeName = nodeArray[i][j].name;\n                const neighbors = {};\n                const top = i !== 0 ? nodeArray[i - 1][j] : null;\n                const bottom =\n                    i !== nodeArray.length - 1 ? nodeArray[i + 1][j] : null;\n                const left = j !== 0 ? nodeArray[i][j - 1] : null;\n                const right =\n                    j !== nodeArray[i].length - 1 ? nodeArray[i][j + 1] : null;\n                if (left && !left.isWall) {\n                    neighbors[left.name] = 1;\n                }\n                if (right && !right.isWall) {\n                    neighbors[right.name] = 1;\n                }\n                if (top && !top.isWall) {\n                    neighbors[top.name] = 1;\n                }\n                if (bottom && !bottom.isWall) {\n                    neighbors[bottom.name] = 1;\n                }\n                graph[nodeName] = neighbors;\n            }\n        }\n    }\n    return graph;\n};\n\nexport default toGraph;\n","const closestNode = (distances, visited) => {\n    // Default closest node = null\n    let shortest = null;\n    Object.keys(distances).forEach((node) => {\n        const isShortest =\n            shortest === null || distances[node] < distances[shortest];\n        // If the node isShortest and has not been visited, set shortest equal to the node\n        if (isShortest && !visited.includes(node)) {\n            shortest = node;\n        }\n    });\n    return shortest;\n};\n\nconst dijkstras = (graph, start, target) => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [];\n    }\n    // Creates HashMap for distance from start node to the given node in the object\n    let distances = {};\n    // Distance from target node to start node is Inf\n    distances[target] = Infinity;\n    distances = Object.assign(distances, graph[start]);\n    // Creates a HashMap for parents of each node so we can get the shortest path at the end\n    const parents = { target: null };\n    Object.keys(graph[start]).forEach((child) => {\n        parents[child] = start;\n    });\n    // Array of visited nodes\n    const visited = [];\n    // CurrentNode is equal to the closest Node to the start node\n    let currentNode = closestNode(distances, visited);\n    while (currentNode && currentNode !== target) {\n        const distance = distances[currentNode];\n        const children = graph[currentNode];\n        const childrenArr = Object.keys(children);\n        // For all the children of the current node\n        for (let child = 0; child < childrenArr.length; child += 1) {\n            // If the child isn't the start node, the distance from the start to the child node is newDistance\n            if (childrenArr[child] !== start) {\n                const newDistance = distance + children[childrenArr[child]];\n                // If there isn't a distance from the start to the child or if that distance is greater than newDistance\n                if (\n                    !distances[childrenArr[child]] ||\n                    distances[childrenArr[child]] > newDistance\n                ) {\n                    // Set that distance to newDistance and let the parent of that node be curreneNode\n                    distances[childrenArr[child]] = newDistance;\n                    parents[childrenArr[child]] = currentNode;\n                }\n            }\n        }\n        // Append the currentNode to visited and change it to the closest unvisited node\n        visited.push(currentNode);\n        currentNode = closestNode(distances, visited);\n    }\n    // Go in reverse from target node to start and save that to the shortestPath\n    const shortestPath = [target];\n    let parent = parents[target];\n    while (parent) {\n        shortestPath.push(parent);\n        parent = parents[parent];\n    }\n    shortestPath.reverse();\n    return [shortestPath, visited];\n};\n\nexport default dijkstras;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ControlPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colStart: 1,\n            colEnd: 20,\n            rowStart: 1,\n            rowEnd: 20,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(e) {\n        const { target } = e;\n        const { name } = target;\n        this.setState({\n            [name]: target.value,\n        });\n    }\n\n    handleSubmit(e) {\n        const { visualize } = this.props;\n        const { rowEnd, colEnd, rowStart, colStart } = this.state;\n        visualize(rowStart, colStart, rowEnd, colEnd);\n        e.preventDefault();\n    }\n\n    render() {\n        const { isButtonDisabled } = this.props;\n        return (\n            <div className=\"row my-3 justify-content-center input-group\">\n                <div className=\"input-group-prepend\">\n                    <span id=\"startcol\" className=\"input-group-text\">\n                        Start Col | End col | Start row | End row\n                    </span>\n                </div>\n                <input\n                    type=\"number\"\n                    name=\"colStart\"\n                    max=\"20\"\n                    min=\"1\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"20\"\n                    min=\"1\"\n                    name=\"colEnd\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"20\"\n                    min=\"1\"\n                    name=\"rowStart\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"20\"\n                    min=\"1\"\n                    name=\"rowEnd\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <button\n                    onClick={this.handleSubmit}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isButtonDisabled}\n                >\n                    Press to graph\n                </button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propTypes = {\n    visualize: PropTypes.func.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired,\n};\n\nexport default ControlPanel;\n","import React from \"react\";\nimport Node from \"../Node/Node\";\nimport \"./App.css\";\nimport toGraph from \"../util/toGraph\";\nimport dijkstras from \"../util/dijkstra\";\nimport ControlPanel from \"../ControlPanel/ControlPanel\";\n\nconst createNode = (col, row) => {\n    return {\n        isPath: false,\n        name: `col${col + 1}row${row + 1}`,\n        col: col + 1,\n        row: row + 1,\n        isWall: false,\n    };\n};\n\nconst getInitialNodes = () => {\n    const nodes = [];\n    for (let i = 0; i < 20; i += 1) {\n        const row = [];\n        for (let j = 0; j < 20; j += 1) {\n            row.push(createNode(j, i));\n        }\n        nodes.push(row);\n    }\n    return nodes;\n};\n\nconst graphWithAddedRemovedWall = (nodes, row, col) => {\n    const newNodes = nodes;\n    newNodes[row - 1][col - 1].isWall = !newNodes[row - 1][col - 1].isWall;\n    return newNodes;\n};\n\nconst removeVisited = (nodes) => {\n    for (let i = 0; i < 20; i += 1) {\n        for (let j = 0; j < 20; j += 1) {\n            if (nodes[i][j].isWall) {\n                document.getElementById(nodes[i][j].name).className =\n                    \"Node wall false\";\n            } else {\n                document.getElementById(nodes[i][j].name).className =\n                    \"Node false\";\n            }\n        }\n    }\n};\n\nconst animate = (visited, path) => {\n    if (visited === undefined) {\n        return;\n    }\n    for (let i = 0; i <= visited.length; i += 1) {\n        if (i === visited.length) {\n            for (let j = 0; j < path.length; j += 1) {\n                setTimeout(() => {\n                    document.getElementById(path[j]).className = `Node true`;\n                }, 15 * i);\n            }\n            break;\n        } else {\n            setTimeout(() => {\n                document.getElementById(visited[i]).className = `Node visited`;\n            }, 15 * i);\n        }\n    }\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [],\n            isMouseDown: false,\n            isButtonDisabled: false,\n        };\n        this.handleOnMouseDown = this.handleOnMouseDown.bind(this);\n        this.handleOnMouseEnter = this.handleOnMouseEnter.bind(this);\n        this.handleOnMouseUp = this.handleOnMouseUp.bind(this);\n        this.visualize = this.visualize.bind(this);\n    }\n\n    componentDidMount() {\n        const nodes = getInitialNodes();\n        this.setState({ nodes });\n    }\n\n    // Animation is finished when there is a path on the grid\n    disableUntilAnimationFinishes() {\n        const int = setInterval(() => {\n            if (document.getElementsByClassName(\"Node true\").length !== 0) {\n                this.setState({ isButtonDisabled: false });\n                clearInterval(int);\n            }\n        }, 15);\n    }\n\n    visualize(rowStart, colStart, rowEnd, colEnd) {\n        const { nodes } = this.state;\n        removeVisited(nodes);\n        const graph = toGraph(nodes);\n        const [path, visited] = dijkstras(\n            graph,\n            `col${colStart}row${rowStart}`,\n            `col${colEnd}row${rowEnd}`\n        );\n        if (path !== undefined) {\n            this.setState({ isButtonDisabled: true });\n        }\n        animate(visited, path);\n        this.disableUntilAnimationFinishes();\n    }\n\n    handleOnMouseDown(row, col) {\n        const { nodes } = this.state;\n        this.setState({ isMouseDown: true });\n        const newNodes = graphWithAddedRemovedWall(nodes, row, col);\n        this.setState({ nodes: newNodes });\n    }\n\n    handleOnMouseUp() {\n        this.setState({ isMouseDown: false });\n    }\n\n    handleOnMouseEnter(row, col) {\n        const { isMouseDown, nodes } = this.state;\n        if (isMouseDown) {\n            const newNodes = graphWithAddedRemovedWall(nodes, row, col);\n            this.setState({ nodes: newNodes });\n        }\n    }\n\n    render() {\n        const { nodes, isButtonDisabled } = this.state;\n        return (\n            <div className=\"App container\">\n                <ControlPanel\n                    isButtonDisabled={isButtonDisabled}\n                    visualize={this.visualize}\n                />\n                <div\n                    role=\"button\"\n                    tabIndex=\"0\"\n                    className=\"grid-container row justify-content-center\"\n                >\n                    {nodes.map((l) => {\n                        return l.map((node) => {\n                            const { isPath, name, row, col, isWall } = node;\n                            return (\n                                <Node\n                                    isPath={isPath}\n                                    name={name}\n                                    row={row}\n                                    col={col}\n                                    isWall={isWall}\n                                    onMouseDown={\n                                        () => this.handleOnMouseDown(row, col)\n                                        // eslint-disable-next-line\n                                    }\n                                    onMouseUp={this.handleOnMouseUp}\n                                    onMouseEnter={\n                                        () => this.handleOnMouseEnter(row, col)\n                                        // eslint-disable-next-line\n                                    }\n                                />\n                            );\n                        });\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}