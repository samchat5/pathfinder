{"version":3,"sources":["util/toGraph.ts","util/dijkstra.ts","ControlPanel/ControlPanel.tsx","util/gridGenerator.ts","Node/Node.tsx","GridContainer/GridContainer.tsx","App/App.tsx","serviceWorker.js","index.js"],"names":["toGraph","nodeArray","graph","i","length","j","isWall","nodeName","name","neighbors","top","bottom","left","right","closestNode","distances","visited","shortest","Object","keys","forEach","node","includes","dijkstras","start","target","undefined","Infinity","assign","parents","child","currentNode","distance","children","childrenArr","newDistance","push","shortestPath","parent","reverse","ControlPanel","finalGrid","props","useState","colStart","setColStart","SIZE","colEnd","setColEnd","rowStart","setRowStart","rowEnd","setRowEnd","changeStart","changeTarget","isButtonDisabled","visualize","generateGrid","generateGridDisabled","resetGrid","useInputChange","e","val","Number","value","className","id","type","max","min","onChange","onClick","preventDefault","disabled","randomNumber","Math","floor","random","innerWalls","isHorz","minX","maxX","minY","maxY","y","door","generateHorizontal","x","generateVertical","gridGenerator","nodes","newNodes","outerWalls","Node","isPath","onMouseDown","onMouseUp","row","col","onMouseEnter","isVisited","isTarget","isStart","wall","tabIndex","role","width","height","viewBox","fill","xmlns","fillRule","d","GridContainer","PropTypes","arrayOf","any","isRequired","func","forwardRef","ref","map","l","createNode","getInitialNodes","App","setNodes","isMouseDown","setIsMouseDown","setIsButtonDisabled","setGenerateGridDisabled","useReducer","forceUpdate","gridRef","useRef","useEffect","graphWithAddedRemovedWall","removeVisited","path","setTimeout","current","childArr","findIndex","elem","animate","time","disableUntilAnimationFinishes","cell","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de675397.chunk.js","sourcesContent":["import Node from \"../NodeInterface\";\n\nconst toGraph = (\n    nodeArray: Array<Array<Node>>\n): { [index: string]: { [index: string]: number } } => {\n    const graph: { [index: string]: { [index: string]: number } } = {};\n    for (let i = 0; i < nodeArray.length; i += 1) {\n        for (let j = 0; j < nodeArray[i].length; j += 1) {\n            if (!nodeArray[i][j].isWall) {\n                const nodeName = nodeArray[i][j].name;\n                const neighbors: { [index: string]: number } = {};\n                const top = i !== 0 ? nodeArray[i - 1][j] : null;\n                const bottom =\n                    i !== nodeArray.length - 1 ? nodeArray[i + 1][j] : null;\n                const left = j !== 0 ? nodeArray[i][j - 1] : null;\n                const right =\n                    j !== nodeArray[i].length - 1 ? nodeArray[i][j + 1] : null;\n                if (left && !left.isWall) {\n                    neighbors[left.name] = 1;\n                }\n                if (right && !right.isWall) {\n                    neighbors[right.name] = 1;\n                }\n                if (top && !top.isWall) {\n                    neighbors[top.name] = 1;\n                }\n                if (bottom && !bottom.isWall) {\n                    neighbors[bottom.name] = 1;\n                }\n                graph[nodeName] = neighbors;\n            }\n        }\n    }\n    return graph;\n};\n\nexport default toGraph;\n","const closestNode = (\n    distances: { [index: string]: number },\n    visited: Array<string>\n): string | null => {\n    // Default closest node = null\n    let shortest: string | null = null;\n    Object.keys(distances).forEach((node) => {\n        const isShortest =\n            shortest === null || distances[node] < distances[shortest];\n        // If the node isShortest and has not been visited, set shortest equal to the node\n        if (isShortest && !visited.includes(node)) {\n            shortest = node;\n        }\n    });\n    return shortest;\n};\n\nconst dijkstras = (\n    graph: { [index: string]: { [index: string]: number } },\n    start: string,\n    target: string\n): [string[], string[]] | [undefined, undefined] => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [undefined, undefined];\n    }\n    // Creates HashMap for distance from start node to the given node in the object\n    let distances: { [index: string]: number } = {};\n    // Distance from target node to start node is Inf\n    distances[target] = Infinity;\n    distances = Object.assign(distances, graph[start]);\n    // Creates a HashMap for parents of each node so we can get the shortest path at the end\n    const parents: { [index: string]: string | null } = { target: null };\n    Object.keys(graph[start]).forEach((child) => {\n        parents[child] = start;\n    });\n    // Array of visited nodes\n    const visited: Array<string> = [];\n    // CurrentNode is equal to the closest Node to the start node\n    let currentNode = closestNode(distances, visited);\n    while (currentNode && currentNode !== target) {\n        const distance = distances[currentNode];\n        const children = graph[currentNode];\n        const childrenArr = Object.keys(children);\n        // For all the children of the current node\n        for (let child = 0; child < childrenArr.length; child += 1) {\n            // If the child isn't the start node, the distance from the start to the child node is newDistance\n            if (childrenArr[child] !== start) {\n                const newDistance = distance + children[childrenArr[child]];\n                // If there isn't a distance from the start to the child or if that distance is greater than newDistance\n                if (\n                    !distances[childrenArr[child]] ||\n                    distances[childrenArr[child]] > newDistance\n                ) {\n                    // Set that distance to newDistance and let the parent of that node be curreneNode\n                    distances[childrenArr[child]] = newDistance;\n                    parents[childrenArr[child]] = currentNode;\n                }\n            }\n        }\n        // Append the currentNode to visited and change it to the closest unvisited node\n        visited.push(currentNode);\n        currentNode = closestNode(distances, visited);\n    }\n    // Go in reverse from target node to start and save that to the shortestPath\n    const shortestPath = [target];\n    let parent = parents[target];\n    while (parent) {\n        shortestPath.push(parent);\n        parent = parents[parent];\n    }\n    shortestPath.reverse();\n    return [shortestPath, visited];\n};\n\nexport default dijkstras;\n","import React, { useState } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nconst SIZE = 31;\n\nfunction ControlPanel(\n    props: InferProps<typeof ControlPanel.propTypes>\n): JSX.Element {\n    const [colStart, setColStart] = useState(2);\n    const [colEnd, setColEnd] = useState(SIZE - 1);\n    const [rowStart, setRowStart] = useState(2);\n    const [rowEnd, setRowEnd] = useState(SIZE - 1);\n\n    const {\n        changeStart,\n        changeTarget,\n        isButtonDisabled,\n        visualize,\n        generateGrid,\n        generateGridDisabled,\n        resetGrid,\n    } = props;\n\n    const useInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { target } = e;\n        const { name } = target;\n        const val = Number(target.value);\n        if (name === \"colStart\") {\n            setColStart(val);\n            changeStart(val, rowStart);\n        } else if (name === \"rowStart\") {\n            setRowStart(val);\n            changeStart(colStart, val);\n        } else if (name === \"colEnd\") {\n            setColEnd(val);\n            changeTarget(val, rowEnd);\n        } else {\n            setRowEnd(val);\n            changeTarget(colEnd, val);\n        }\n    };\n\n    const handleSubmit = (e: React.FormEvent<HTMLButtonElement>): void => {\n        visualize(rowStart, colStart, rowEnd, colEnd);\n        e.preventDefault();\n    };\n\n    const reset = (): void => {\n        setColEnd(SIZE - 1);\n        setColStart(2);\n        setRowStart(2);\n        setRowEnd(SIZE - 1);\n        resetGrid();\n    };\n\n    return (\n        <div className=\"row my-3 justify-content-center input-group\">\n            <div className=\"input-group-prepend\">\n                <span id=\"startcol\" className=\"input-group-text\">\n                    Start Col | End col | Start row | End row\n                </span>\n            </div>\n            <input\n                type=\"number\"\n                name=\"colStart\"\n                max={SIZE}\n                min=\"1\"\n                className=\"form-control\"\n                onChange={useInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"colEnd\"\n                className=\"form-control\"\n                onChange={useInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"rowStart\"\n                className=\"form-control\"\n                onChange={useInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"rowEnd\"\n                className=\"form-control\"\n                onChange={useInputChange}\n            />\n            <button\n                onClick={handleSubmit}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isButtonDisabled}\n            >\n                Press to graph\n            </button>\n            <button\n                onClick={generateGrid}\n                disabled={generateGridDisabled}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n            >\n                Press for grid\n            </button>\n            <button onClick={reset} type=\"submit\" className=\"btn btn-primary\">\n                Reset\n            </button>\n        </div>\n    );\n}\n\nControlPanel.propTypes = {\n    visualize: PropTypes.func.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired,\n    changeStart: PropTypes.func.isRequired,\n    changeTarget: PropTypes.func.isRequired,\n    generateGrid: PropTypes.func.isRequired,\n    generateGridDisabled: PropTypes.bool.isRequired,\n    resetGrid: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import Node from \"../NodeInterface\";\n\nlet finalGrid: Array<Array<Node>>;\n\n// Generates a random number in this range INCLUSIVE\nconst randomNumber = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst outerWalls = (): void => {\n    const newNodes = finalGrid;\n    for (let i = 0; i < finalGrid.length; i += 1) {\n        for (let j = 0; j < finalGrid[i].length; j += 1) {\n            if (\n                i === 0 ||\n                j === 0 ||\n                j === finalGrid.length - 1 ||\n                i === finalGrid.length - 1\n            ) {\n                newNodes[i][j].isWall = true;\n            }\n        }\n    }\n    finalGrid = newNodes;\n};\n\nconst generateHorizontal = (minX: number, maxX: number, y: number): void => {\n    const door = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n    for (let i = minX; i < maxX; i += 1) {\n        if (i !== door) {\n            finalGrid[y][i].isWall = true;\n        }\n    }\n};\n\nconst generateVertical = (minY: number, maxY: number, x: number): void => {\n    const door = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n    for (let i = minY; i < maxY; i += 1) {\n        if (i !== door) {\n            finalGrid[i][x].isWall = true;\n        }\n    }\n};\n\nconst innerWalls = (\n    isHorz: boolean,\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number\n): void => {\n    if (isHorz) {\n        if (maxX - minX < 2) {\n            return;\n        }\n        const y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n        generateHorizontal(minX, maxX, y);\n        innerWalls(false, minX, maxX, minY, y - 1);\n        innerWalls(false, minX, maxX, y + 1, maxY);\n    } else {\n        if (maxY - minY < 2) {\n            return;\n        }\n        const x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n        generateVertical(minY, maxY, x);\n        innerWalls(true, minX, x - 1, minY, maxY);\n        innerWalls(true, x + 1, maxX, minY, maxY);\n    }\n};\n\nconst gridGenerator = (nodes: Array<Array<Node>>): Array<Array<Node>> => {\n    finalGrid = nodes;\n    outerWalls();\n    innerWalls(true, 1, nodes.length - 2, 1, nodes.length - 2);\n    return finalGrid;\n};\n\nexport default gridGenerator;\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events, jsx-a11y/control-has-associated-label */\n\nimport React from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport \"./Node.css\";\n\nfunction Node(props: InferProps<typeof Node.propTypes>): JSX.Element {\n    const {\n        name,\n        isPath,\n        isWall,\n        onMouseDown,\n        onMouseUp,\n        row,\n        col,\n        onMouseEnter,\n        isVisited,\n        isTarget,\n        isStart,\n    } = props;\n    const wall = isWall ? \"wall\" : \"\";\n    const visited = isVisited ? \"visited\" : \"\";\n\n    const renderNode = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            />\n        );\n    };\n\n    const renderStart = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-house-fill align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 3.293l6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\"\n                    />\n                </svg>\n            </div>\n        );\n    };\n\n    const renderTarget = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-bullseye target align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z\"\n                    />\n                    <path d=\"M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                </svg>\n            </div>\n        );\n    };\n\n    if (isTarget) {\n        return renderTarget();\n    }\n    if (isStart) {\n        return renderStart();\n    }\n    return renderNode();\n}\n\nNode.propTypes = {\n    name: PropTypes.string.isRequired,\n    isPath: PropTypes.bool.isRequired,\n    row: PropTypes.number.isRequired,\n    col: PropTypes.number.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n    isWall: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    isTarget: PropTypes.bool.isRequired,\n    isStart: PropTypes.bool.isRequired,\n    isVisited: PropTypes.bool.isRequired,\n};\n\nexport default Node;\n","import React, { forwardRef, Ref } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport Node from \"../Node/Node\";\nimport NodeObj from \"../NodeInterface\";\n\nconst GridContainerProps = {\n    nodes: PropTypes.arrayOf(PropTypes.any).isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n};\n\nconst GridContainer = forwardRef(\n    (\n        props: InferProps<typeof GridContainerProps>,\n        ref: Ref<HTMLDivElement>\n    ) => {\n        const { nodes, onMouseDown, onMouseEnter, onMouseUp } = props;\n        return (\n            <div\n                role=\"button\"\n                tabIndex={0}\n                id=\"grid-container\"\n                ref={ref}\n                className=\"grid-container row justify-content-center\"\n            >\n                {nodes.map((l) => {\n                    return l.map((node: NodeObj) => {\n                        const {\n                            isPath,\n                            name,\n                            row,\n                            col,\n                            isWall,\n                            isTarget,\n                            isStart,\n                            isVisited,\n                        } = node;\n                        return (\n                            <Node\n                                isPath={isPath}\n                                name={name}\n                                row={row}\n                                col={col}\n                                isWall={isWall}\n                                isTarget={isTarget}\n                                isStart={isStart}\n                                isVisited={isVisited}\n                                onMouseDown={(): void => onMouseDown(row, col)}\n                                onMouseUp={onMouseUp}\n                                onMouseEnter={\n                                    (): void => onMouseEnter(row, col)\n                                    // eslint-ignore-next-line\n                                }\n                            />\n                        );\n                    });\n                })}\n            </div>\n        );\n    }\n);\n\nexport default GridContainer;\n","import React, { useRef, useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport toGraph from \"../util/toGraph\";\nimport dijkstras from \"../util/dijkstra\";\nimport ControlPanel from \"../ControlPanel/ControlPanel\";\nimport gridGenerator from \"../util/gridGenerator\";\nimport GridContainer from \"../GridContainer/GridContainer\";\nimport Node from \"../NodeInterface\";\n\nconst SIZE = 31;\n\n// Creates a node object literal\nconst createNode = (col: number, row: number): Node => {\n    return {\n        isPath: false,\n        name: `col${col + 1}row${row + 1}`,\n        col: col + 1,\n        row: row + 1,\n        isWall: false,\n        isStart: false,\n        isTarget: false,\n        isVisited: false,\n    };\n};\n\n// Builds a node array representing the initial state of the grid\nconst getInitialNodes = (): Array<Array<Node>> => {\n    const nodes = [];\n    for (let i = 0; i < SIZE; i += 1) {\n        const row = [];\n        for (let j = 0; j < SIZE; j += 1) {\n            if (i === 1 && j === 1) {\n                const start = createNode(j, i);\n                start.isStart = true;\n                row.push(start);\n            } else if (i === SIZE - 2 && j === SIZE - 2) {\n                const target = createNode(j, i);\n                target.isTarget = true;\n                row.push(target);\n            } else {\n                row.push(createNode(j, i));\n            }\n        }\n        nodes.push(row);\n    }\n    return nodes;\n};\n\nfunction App(): JSX.Element {\n    const [nodes, setNodes] = useState<Array<Array<Node>>>(getInitialNodes());\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const [generateGridDisabled, setGenerateGridDisabled] = useState(false);\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\n    const gridRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n    }, []);\n\n    // Removes all target nodes from the node array and chagnes it to the given cell\n    const changeTarget = (colEnd: number, rowEnd: number): void => {\n        const cell = `col${colEnd}row${rowEnd}`;\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const target = createNode(j, i);\n                    target.isTarget = true;\n                    newNodes[i][j] = target;\n                } else if (nodes[i][j].isTarget === true) {\n                    newNodes[i][j].isTarget = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        // Same with the animations for the walls, only one node out of SIZE**2 nodes is being update so\n        // to animate we have to force a full render\n        forceUpdate();\n    };\n\n    // Removes all start nodes from the node array and changes it to the given cell\n    const changeStart = (colStart: number, rowStart: number): void => {\n        const cell = `col${colStart}row${rowStart}`;\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const start = createNode(j, i);\n                    start.isStart = true;\n                    newNodes[i][j] = start;\n                } else if (nodes[i][j].isStart === true) {\n                    newNodes[i][j].isStart = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        forceUpdate();\n    };\n\n    // Removes visited and path nodes inside the list of Nodes\n    const removeVisited = (): Node[][] => {\n        const newNodes = nodes;\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                newNodes[i][j].isPath = false;\n                newNodes[i][j].isVisited = false;\n            }\n        }\n        return newNodes;\n    };\n\n    // Toggles whether or not a node is a wal or not\n    const graphWithAddedRemovedWall = (row: number, col: number): Node[][] => {\n        const newNodes = nodes;\n        newNodes[row - 1][col - 1].isWall = !newNodes[row - 1][col - 1].isWall;\n        return newNodes;\n    };\n\n    // This is where we use the ref for imperative animations\n    const animate = (visited: string[], path: string[]): void => {\n        if (visited === undefined) {\n            return;\n        }\n        for (let i = 0; i <= visited.length; i += 1) {\n            if (i === visited.length) {\n                for (let j = 0; j < path.length; j += 1) {\n                    setTimeout(() => {\n                        if (gridRef && gridRef.current) {\n                            const childArr = [...gridRef.current.children];\n                            childArr[\n                                childArr.findIndex(\n                                    (elem) => elem.id === path[j]\n                                )\n                            ].className = \"Node true\";\n                        }\n                    }, 15 * i + 30 * j);\n                }\n                break;\n            } else {\n                setTimeout(() => {\n                    if (gridRef && gridRef.current) {\n                        const childArr = [...gridRef.current.children];\n                        childArr[\n                            childArr.findIndex((elem) => elem.id === visited[i])\n                        ].className = \"Node visited\";\n                    }\n                }, 15 * i);\n            }\n        }\n    };\n\n    // Animation is finished when there is a path on the grid\n    const disableUntilAnimationFinishes = (time: number): void => {\n        setTimeout(() => {\n            setIsButtonDisabled(false);\n        }, time);\n    };\n\n    const useVisualize = (\n        rowStart: number,\n        colStart: number,\n        rowEnd: number,\n        colEnd: number\n    ): void => {\n        // First, remove all visited nodes from the current grid\n        setNodes(removeVisited());\n        const graph = toGraph(nodes);\n        const [path, visited] = dijkstras(\n            graph,\n            `col${colStart}row${rowStart}`,\n            `col${colEnd}row${rowEnd}`\n        );\n        // Then, if the path is defined, disable the graph button and animte\n        if (path !== undefined && visited !== undefined) {\n            setIsButtonDisabled(true);\n            animate(visited, path);\n            const time = 15 * visited.length + 30 * path.length;\n            // Enable the button after time ms\n            disableUntilAnimationFinishes(time);\n            // TODO: make this it's own function?\n            setTimeout(() => {\n                setNodes(() => {\n                    const newNodes = nodes;\n                    for (let i = 0; i < nodes.length; i += 1) {\n                        for (let j = 0; j < nodes[i].length; j += 1) {\n                            if (path.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isPath = true;\n                            } else if (visited.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isVisited = true;\n                            }\n                        }\n                    }\n                    return newNodes;\n                });\n            }, time);\n        }\n    };\n\n    const handleOnMouseEnter = (row: number, col: number): void => {\n        if (isMouseDown) {\n            const newNodes = graphWithAddedRemovedWall(row, col);\n            setNodes(newNodes);\n            // Typically forceUpdate isn't good to call, but with these hooks, too little of the nodes array is changing\n            // to justify a complete rerender, but that's needed to animate the walls on a mouseover\n            forceUpdate();\n        }\n    };\n\n    // TODO: combine these functions with the function up top\n    const handleOnMouseDown = (row: number, col: number): void => {\n        const newNodes = graphWithAddedRemovedWall(row, col);\n        setNodes(newNodes);\n        setIsMouseDown(true);\n    };\n\n    const handleOnMouseUp = (): void => {\n        setIsMouseDown(false);\n    };\n\n    // Generates a grid using recursive division\n    const generateGrid = (): void => {\n        const newNodes = gridGenerator(nodes);\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                if (newNodes[i][j].isPath) {\n                    newNodes[i][j].isPath = false;\n                }\n                if (newNodes[i][j].isVisited) {\n                    newNodes[i][j].isVisited = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        setGenerateGridDisabled(true);\n    };\n\n    // Resets the grid to initial state\n    const resetGrid = (): void => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n        setGenerateGridDisabled(false);\n        // After setting the className during the animate function, we have to reset it\n        // through a manual DOM update over here\n        if (gridRef && gridRef.current) {\n            for (let i = 0; i < gridRef.current.children.length; i += 1) {\n                gridRef.current.children[i].className = \"Node false\";\n            }\n        }\n    };\n\n    return (\n        <div className=\"App container\">\n            <ControlPanel\n                isButtonDisabled={isButtonDisabled}\n                visualize={useVisualize}\n                changeStart={changeStart}\n                changeTarget={changeTarget}\n                generateGrid={generateGrid}\n                generateGridDisabled={generateGridDisabled}\n                resetGrid={resetGrid}\n            />\n            <GridContainer\n                onMouseEnter={handleOnMouseEnter}\n                onMouseUp={handleOnMouseUp}\n                onMouseDown={handleOnMouseDown}\n                ref={gridRef}\n                nodes={nodes}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}