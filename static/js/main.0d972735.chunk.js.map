{"version":3,"sources":["util/toGraph.js","util/dijkstra.js","ControlPanel/ControlPanel.jsx","util/gridGenerator.js","Node/Node.jsx","GridContainer/GridContainer.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["toGraph","nodeArray","graph","i","length","j","isWall","nodeName","name","neighbors","top","bottom","left","right","closestNode","distances","visited","shortest","Object","keys","forEach","node","includes","dijkstras","start","target","undefined","Infinity","assign","parents","child","currentNode","distance","children","childrenArr","newDistance","push","shortestPath","parent","reverse","ControlPanel","finalGrid","props","useState","colStart","colEnd","SIZE","rowStart","rowEnd","state","setState","changeStart","changeTarget","isButtonDisabled","visualize","generateGrid","generateGridDisabled","resetGrid","handleInputChange","e","Number","value","className","id","type","max","min","onChange","onClick","preventDefault","disabled","randomNumber","Math","floor","random","innerWalls","isHorz","minX","maxX","minY","maxY","y","door","generateHorizontal","x","generateVertical","gridGenerator","nodes","newNodes","outerWalls","Node","isPath","onMouseDown","onMouseUp","row","col","onMouseEnter","isVisited","isTarget","isStart","wall","tabIndex","role","width","height","viewBox","fill","xmlns","fillRule","d","GridContainer","forwardRef","ref","map","l","createNode","getInitialNodes","App","setNodes","isMouseDown","setIsMouseDown","setIsButtonDisabled","setGenerateGridDisabled","useReducer","forceUpdate","gridRef","useRef","useEffect","graphWithAddedRemovedWall","removeVisited","path","setTimeout","current","animate","time","disableUntilAnimationFinishes","cell","addStart","addTarget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d972735.chunk.js","sourcesContent":["// [List-of Node] => Graph\nconst toGraph = (nodeArray) => {\n    const graph = {};\n    for (let i = 0; i < nodeArray.length; i += 1) {\n        for (let j = 0; j < nodeArray[i].length; j += 1) {\n            if (!nodeArray[i][j].isWall) {\n                const nodeName = nodeArray[i][j].name;\n                const neighbors = {};\n                const top = i !== 0 ? nodeArray[i - 1][j] : null;\n                const bottom =\n                    i !== nodeArray.length - 1 ? nodeArray[i + 1][j] : null;\n                const left = j !== 0 ? nodeArray[i][j - 1] : null;\n                const right =\n                    j !== nodeArray[i].length - 1 ? nodeArray[i][j + 1] : null;\n                if (left && !left.isWall) {\n                    neighbors[left.name] = 1;\n                }\n                if (right && !right.isWall) {\n                    neighbors[right.name] = 1;\n                }\n                if (top && !top.isWall) {\n                    neighbors[top.name] = 1;\n                }\n                if (bottom && !bottom.isWall) {\n                    neighbors[bottom.name] = 1;\n                }\n                graph[nodeName] = neighbors;\n            }\n        }\n    }\n    return graph;\n};\n\nexport default toGraph;\n","const closestNode = (distances, visited) => {\n    // Default closest node = null\n    let shortest = null;\n    Object.keys(distances).forEach((node) => {\n        const isShortest =\n            shortest === null || distances[node] < distances[shortest];\n        // If the node isShortest and has not been visited, set shortest equal to the node\n        if (isShortest && !visited.includes(node)) {\n            shortest = node;\n        }\n    });\n    return shortest;\n};\n\nconst dijkstras = (graph, start, target) => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [];\n    }\n    // Creates HashMap for distance from start node to the given node in the object\n    let distances = {};\n    // Distance from target node to start node is Inf\n    distances[target] = Infinity;\n    distances = Object.assign(distances, graph[start]);\n    // Creates a HashMap for parents of each node so we can get the shortest path at the end\n    const parents = { target: null };\n    Object.keys(graph[start]).forEach((child) => {\n        parents[child] = start;\n    });\n    // Array of visited nodes\n    const visited = [];\n    // CurrentNode is equal to the closest Node to the start node\n    let currentNode = closestNode(distances, visited);\n    while (currentNode && currentNode !== target) {\n        const distance = distances[currentNode];\n        const children = graph[currentNode];\n        const childrenArr = Object.keys(children);\n        // For all the children of the current node\n        for (let child = 0; child < childrenArr.length; child += 1) {\n            // If the child isn't the start node, the distance from the start to the child node is newDistance\n            if (childrenArr[child] !== start) {\n                const newDistance = distance + children[childrenArr[child]];\n                // If there isn't a distance from the start to the child or if that distance is greater than newDistance\n                if (\n                    !distances[childrenArr[child]] ||\n                    distances[childrenArr[child]] > newDistance\n                ) {\n                    // Set that distance to newDistance and let the parent of that node be curreneNode\n                    distances[childrenArr[child]] = newDistance;\n                    parents[childrenArr[child]] = currentNode;\n                }\n            }\n        }\n        // Append the currentNode to visited and change it to the closest unvisited node\n        visited.push(currentNode);\n        currentNode = closestNode(distances, visited);\n    }\n    // Go in reverse from target node to start and save that to the shortestPath\n    const shortestPath = [target];\n    let parent = parents[target];\n    while (parent) {\n        shortestPath.push(parent);\n        parent = parents[parent];\n    }\n    shortestPath.reverse();\n    return [shortestPath, visited];\n};\n\nexport default dijkstras;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SIZE = 31;\n\nfunction ControlPanel(props) {\n    const [state, setState] = useState({\n        colStart: 2,\n        colEnd: SIZE - 1,\n        rowStart: 2,\n        rowEnd: SIZE - 1,\n    });\n    const {\n        changeStart,\n        changeTarget,\n        isButtonDisabled,\n        visualize,\n        generateGrid,\n        generateGridDisabled,\n        resetGrid,\n    } = props;\n\n    const handleInputChange = (e) => {\n        const { target } = e;\n        const { name } = target;\n        setState(\n            {\n                [name]: Number(target.value),\n            },\n            () => {\n                const { colStart, colEnd, rowEnd, rowStart } = state;\n                if (name === \"colStart\" || name === \"rowStart\") {\n                    changeStart(colStart, rowStart);\n                } else {\n                    changeTarget(colEnd, rowEnd);\n                }\n            }\n        );\n    };\n\n    const handleSubmit = (e) => {\n        const { rowEnd, colEnd, rowStart, colStart } = state;\n        visualize(rowStart, colStart, rowEnd, colEnd);\n        e.preventDefault();\n    };\n\n    const reset = () => {\n        setState({\n            colEnd: SIZE - 1,\n            colStart: 2,\n            rowStart: 2,\n            rowEnd: SIZE - 1,\n        });\n        resetGrid();\n    };\n\n    return (\n        <div className=\"row my-3 justify-content-center input-group\">\n            <div className=\"input-group-prepend\">\n                <span id=\"startcol\" className=\"input-group-text\">\n                    Start Col | End col | Start row | End row\n                </span>\n            </div>\n            <input\n                type=\"number\"\n                name=\"colStart\"\n                max={SIZE}\n                min=\"1\"\n                className=\"form-control\"\n                onChange={handleInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"colEnd\"\n                className=\"form-control\"\n                onChange={handleInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"rowStart\"\n                className=\"form-control\"\n                onChange={handleInputChange}\n            />\n            <input\n                type=\"number\"\n                max={SIZE}\n                min=\"1\"\n                name=\"rowEnd\"\n                className=\"form-control\"\n                onChange={handleInputChange}\n            />\n            <button\n                onClick={handleSubmit}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isButtonDisabled}\n            >\n                Press to graph\n            </button>\n            <button\n                onClick={generateGrid}\n                disabled={generateGridDisabled}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n            >\n                Press for grid\n            </button>\n            <button onClick={reset} type=\"submit\" className=\"btn btn-primary\">\n                Reset\n            </button>\n        </div>\n    );\n}\n\nControlPanel.propTypes = {\n    visualize: PropTypes.func.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired,\n    changeStart: PropTypes.func.isRequired,\n    changeTarget: PropTypes.func.isRequired,\n    generateGrid: PropTypes.func.isRequired,\n    generateGridDisabled: PropTypes.bool.isRequired,\n    resetGrid: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","let finalGrid;\n\n// Generates a random number in this range INCLUSIVE\nconst randomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst outerWalls = () => {\n    const newNodes = finalGrid;\n    for (let i = 0; i < finalGrid.length; i += 1) {\n        for (let j = 0; j < finalGrid[i].length; j += 1) {\n            if (\n                i === 0 ||\n                j === 0 ||\n                j === finalGrid.length - 1 ||\n                i === finalGrid.length - 1\n            ) {\n                newNodes[i][j].isWall = true;\n            }\n        }\n    }\n    finalGrid = newNodes;\n};\n\nconst generateHorizontal = (minX, maxX, y) => {\n    const door = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n    for (let i = minX; i < maxX; i += 1) {\n        if (i !== door) {\n            finalGrid[y][i].isWall = true;\n        }\n    }\n};\n\nconst generateVertical = (minY, maxY, x) => {\n    const door = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n    for (let i = minY; i < maxY; i += 1) {\n        if (i !== door) {\n            finalGrid[i][x].isWall = true;\n        }\n    }\n};\n\nconst innerWalls = (isHorz, minX, maxX, minY, maxY) => {\n    if (isHorz) {\n        if (maxX - minX < 2) {\n            return;\n        }\n        const y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n        generateHorizontal(minX, maxX, y);\n        innerWalls(false, minX, maxX, minY, y - 1);\n        innerWalls(false, minX, maxX, y + 1, maxY);\n    } else {\n        if (maxY - minY < 2) {\n            return;\n        }\n        const x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n        generateVertical(minY, maxY, x);\n        innerWalls(true, minX, x - 1, minY, maxY);\n        innerWalls(true, x + 1, maxX, minY, maxY);\n    }\n};\n\nconst gridGenerator = (nodes) => {\n    finalGrid = nodes;\n    outerWalls(finalGrid);\n    innerWalls(true, 1, nodes.length - 2, 1, nodes.length - 2);\n    return finalGrid;\n};\n\nexport default gridGenerator;\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events, jsx-a11y/control-has-associated-label */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Node.css\";\n\nfunction Node(props) {\n    const {\n        name,\n        isPath,\n        isWall,\n        onMouseDown,\n        onMouseUp,\n        row,\n        col,\n        onMouseEnter,\n        isVisited,\n        isTarget,\n        isStart,\n    } = props;\n    const wall = isWall ? \"wall\" : \"\";\n    const visited = isVisited ? \"visited\" : \"\";\n\n    const renderNode = () => {\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            />\n        );\n    };\n\n    const renderStart = () => {\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-house-fill align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 3.293l6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\"\n                    />\n                </svg>\n            </div>\n        );\n    };\n\n    const renderTarget = () => {\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-bullseye target align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z\"\n                    />\n                    <path d=\"M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                </svg>\n            </div>\n        );\n    };\n\n    if (isTarget) {\n        return renderTarget();\n    }\n    if (isStart) {\n        return renderStart();\n    }\n    return renderNode();\n}\n\nNode.propTypes = {\n    name: PropTypes.string.isRequired,\n    isPath: PropTypes.bool.isRequired,\n    row: PropTypes.number.isRequired,\n    col: PropTypes.number.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n    isWall: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    isTarget: PropTypes.bool.isRequired,\n    isStart: PropTypes.bool.isRequired,\n    isVisited: PropTypes.bool.isRequired,\n};\n\nexport default Node;\n","import React, { forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Node from \"../Node/Node\";\n\nconst GridContainer = forwardRef((props, ref) => {\n    const { nodes, onMouseDown, onMouseEnter, onMouseUp } = props;\n    return (\n        <div\n            role=\"button\"\n            tabIndex=\"0\"\n            id=\"grid-container\"\n            ref={ref}\n            className=\"grid-container row justify-content-center\"\n        >\n            {nodes.map((l) => {\n                return l.map((node) => {\n                    const {\n                        isPath,\n                        name,\n                        row,\n                        col,\n                        isWall,\n                        isTarget,\n                        isStart,\n                        isVisited,\n                    } = node;\n                    return (\n                        <Node\n                            isPath={isPath}\n                            name={name}\n                            row={row}\n                            col={col}\n                            isWall={isWall}\n                            isTarget={isTarget}\n                            isStart={isStart}\n                            isVisited={isVisited}\n                            onMouseDown={() => onMouseDown(row, col)}\n                            onMouseUp={onMouseUp}\n                            onMouseEnter={() => onMouseEnter(row, col)}\n                        />\n                    );\n                });\n            })}\n        </div>\n    );\n});\n\nGridContainer.propTypes = {\n    nodes: PropTypes.arrayOf(PropTypes.any).isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n};\n\nexport default GridContainer;\n","import React, { useRef, useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport toGraph from \"../util/toGraph\";\nimport dijkstras from \"../util/dijkstra\";\nimport ControlPanel from \"../ControlPanel/ControlPanel\";\nimport gridGenerator from \"../util/gridGenerator\";\nimport GridContainer from \"../GridContainer/GridContainer\";\n\nconst SIZE = 31;\n\n// Creates a node object literal\nconst createNode = (col, row) => {\n    return {\n        isPath: false,\n        name: `col${col + 1}row${row + 1}`,\n        col: col + 1,\n        row: row + 1,\n        isWall: false,\n        isStart: false,\n        isTarget: false,\n        isVisited: false,\n    };\n};\n\n// Builds a node array representing the initial state of the grid\nconst getInitialNodes = () => {\n    const nodes = [];\n    for (let i = 0; i < SIZE; i += 1) {\n        const row = [];\n        for (let j = 0; j < SIZE; j += 1) {\n            if (i === 1 && j === 1) {\n                const start = createNode(j, i);\n                start.isStart = true;\n                row.push(start);\n            } else if (i === SIZE - 2 && j === SIZE - 2) {\n                const target = createNode(j, i);\n                target.isTarget = true;\n                row.push(target);\n            } else {\n                row.push(createNode(j, i));\n            }\n        }\n        nodes.push(row);\n    }\n    return nodes;\n};\n\nfunction App() {\n    const [nodes, setNodes] = useState([]);\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const [generateGridDisabled, setGenerateGridDisabled] = useState(false);\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\n    const gridRef = useRef();\n\n    useEffect(() => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n    }, []);\n\n    // Removes all target nodes from the node array and chagnes it to the given cell\n    const addTarget = (cell) => {\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const target = createNode(j, i);\n                    target.isTarget = true;\n                    newNodes[i][j] = target;\n                } else if (nodes[i][j].isTarget === true) {\n                    newNodes[i][j].isTarget = false;\n                }\n            }\n        }\n        return newNodes;\n    };\n\n    // Removes all start nodes from the node array and changes it to the given cell\n    const addStart = (cell) => {\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const start = createNode(j, i);\n                    start.isStart = true;\n                    newNodes[i][j] = start;\n                } else if (nodes[i][j].isStart === true) {\n                    newNodes[i][j].isStart = false;\n                }\n            }\n        }\n        return newNodes;\n    };\n\n    // Removes visited and path nodes inside the list of Nodes\n    const removeVisited = () => {\n        const newNodes = nodes;\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                newNodes[i][j].isPath = false;\n                newNodes[i][j].isVisited = false;\n            }\n        }\n        return newNodes;\n    };\n\n    // Toggles whether or not a node is a wal or not\n    const graphWithAddedRemovedWall = (row, col) => {\n        const newNodes = nodes;\n        newNodes[row - 1][col - 1].isWall = !newNodes[row - 1][col - 1].isWall;\n        return newNodes;\n    };\n\n    // This is where we use the ref for imperative animations\n    const animate = (visited, path) => {\n        if (visited === undefined) {\n            return;\n        }\n        for (let i = 0; i <= visited.length; i += 1) {\n            if (i === visited.length) {\n                for (let j = 0; j < path.length; j += 1) {\n                    setTimeout(() => {\n                        gridRef.current.children[path[j]].className =\n                            \"Node true\";\n                    }, 15 * i + 30 * j);\n                }\n                break;\n            } else {\n                setTimeout(() => {\n                    gridRef.current.children[visited[i]].className =\n                        \"Node visited\";\n                }, 15 * i);\n            }\n        }\n    };\n\n    // Animation is finished when there is a path on the grid\n    const disableUntilAnimationFinishes = (time) => {\n        setTimeout(() => {\n            setIsButtonDisabled(false);\n        }, time);\n    };\n\n    // TODO: combine these functions with those defined above\n    const changeStart = (colStart, rowStart) => {\n        const newNodes = addStart(nodes, `col${colStart}row${rowStart}`);\n        setNodes(newNodes);\n    };\n\n    const changeTarget = (colEnd, rowEnd) => {\n        const newNodes = addTarget(nodes, `col${colEnd}row${rowEnd}`);\n        setNodes(newNodes);\n    };\n\n    const useVisualize = (rowStart, colStart, rowEnd, colEnd) => {\n        // First, remove all visited nodes from the current grid\n        setNodes(removeVisited(nodes));\n        const graph = toGraph(nodes);\n        const [path, visited] = dijkstras(\n            graph,\n            `col${colStart}row${rowStart}`,\n            `col${colEnd}row${rowEnd}`\n        );\n        // Then, if the path is defined, disable the graph button and animte\n        if (path !== undefined) {\n            setIsButtonDisabled(true);\n            animate(visited, path);\n            const time = 15 * visited.length + 30 * path.length;\n            // Enable the button after time ms\n            disableUntilAnimationFinishes(time);\n            // TODO: make this it's own function?\n            setTimeout(() => {\n                setNodes(() => {\n                    const newNodes = nodes;\n                    for (let i = 0; i < nodes.length; i += 1) {\n                        for (let j = 0; j < nodes[i].length; j += 1) {\n                            if (path.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isPath = true;\n                            } else if (visited.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isVisited = true;\n                            }\n                        }\n                    }\n                    return newNodes;\n                });\n            }, time);\n        }\n    };\n\n    const handleOnMouseEnter = (row, col) => {\n        if (isMouseDown) {\n            const newNodes = graphWithAddedRemovedWall(row, col);\n            setNodes(newNodes);\n            // Typically forceUpdate isn't good to call, but with these hooks, too little of the nodes array is changing\n            // to justify a complete rerender, but that's needed to animate the walls on a mouseover\n            forceUpdate();\n        }\n    };\n\n    // TODO: combine these functions with the function up top\n    const handleOnMouseDown = (row, col) => {\n        const newNodes = graphWithAddedRemovedWall(row, col);\n        setNodes(newNodes);\n        setIsMouseDown(true);\n    };\n\n    const handleOnMouseUp = () => {\n        setIsMouseDown(false);\n    };\n\n    // Generates a grid using recursive division\n    const generateGrid = () => {\n        const newNodes = gridGenerator(nodes);\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                if (newNodes[i][j].isPath) {\n                    newNodes[i][j].isPath = false;\n                }\n                if (newNodes[i][j].isVisited) {\n                    newNodes[i][j].isVisited = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        setGenerateGridDisabled(true);\n    };\n\n    // Resets the grid to initial state\n    const resetGrid = () => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n        setGenerateGridDisabled(false);\n        // After setting the className during the animate function, we have to reset it\n        // through a manual DOM update over here\n        for (let i = 0; i < gridRef.current.children.length; i += 1) {\n            gridRef.current.children[i].className = \"Node false\";\n        }\n    };\n\n    return (\n        <div className=\"App container\">\n            <ControlPanel\n                isButtonDisabled={isButtonDisabled}\n                visualize={useVisualize}\n                changeStart={changeStart}\n                changeTarget={changeTarget}\n                generateGrid={generateGrid}\n                generateGridDisabled={generateGridDisabled}\n                resetGrid={resetGrid}\n            />\n            <GridContainer\n                onMouseEnter={handleOnMouseEnter}\n                onMouseUp={handleOnMouseUp}\n                onMouseDown={handleOnMouseDown}\n                ref={gridRef}\n                nodes={nodes}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}