{"version":3,"sources":["util/gridGenerator.js","Node/Node.jsx","util/toGraph.js","util/dijkstra.js","ControlPanel/ControlPanel.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["finalGrid","Node","this","props","name","isPath","isWall","onMouseDown","onMouseUp","row","col","onMouseEnter","wall","tabIndex","role","id","className","width","height","viewBox","fill","xmlns","fillRule","d","isTarget","isStart","renderTarget","renderStart","renderNode","React","PureComponent","toGraph","nodeArray","graph","i","length","j","nodeName","neighbors","top","bottom","left","right","closestNode","distances","visited","shortest","Object","keys","forEach","node","includes","dijkstras","start","target","undefined","Infinity","assign","parents","child","currentNode","distance","children","childrenArr","newDistance","push","shortestPath","parent","reverse","ControlPanel","state","colStart","colEnd","rowStart","rowEnd","handleInputChange","bind","handleSubmit","reset","e","changeStart","changeTarget","setState","Number","value","visualize","preventDefault","resetGrid","isButtonDisabled","generateGrid","generateGridDisabled","type","max","min","onChange","onClick","disabled","Component","randomNumber","Math","floor","random","innerWalls","isHorz","minX","maxX","minY","maxY","y","door","generateHorizontal","x","generateVertical","gridGenerator","nodes","newNodes","outerWalls","createNode","getInitialNodes","SIZE","graphWithAddedRemovedWall","App","isMouseDown","handleOnMouseDown","handleOnMouseEnter","handleOnMouseUp","int","setInterval","document","getElementsByClassName","clearInterval","cell","addStart","addTarget","getElementById","removeVisited","path","setTimeout","animate","disableUntilAnimationFinishes","gridArray","map","l","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d7a2e47.chunk.js","sourcesContent":["let finalGrid;\n\n// Generates a random number in this range INCLUSIVE\nconst randomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst outerWalls = () => {\n    const newNodes = finalGrid;\n    for (let i = 0; i < finalGrid.length; i += 1) {\n        for (let j = 0; j < finalGrid[i].length; j += 1) {\n            if (\n                i === 0 ||\n                j === 0 ||\n                j === finalGrid.length - 1 ||\n                i === finalGrid.length - 1\n            ) {\n                newNodes[i][j].isWall = true;\n            }\n        }\n    }\n    finalGrid = newNodes;\n};\n\nconst generateHorizontal = (minX, maxX, y) => {\n    const door = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n    for (let i = minX; i < maxX; i += 1) {\n        if (i !== door) {\n            finalGrid[y][i].isWall = true;\n        }\n    }\n};\n\nconst generateVertical = (minY, maxY, x) => {\n    const door = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n    for (let i = minY; i < maxY; i += 1) {\n        if (i !== door) {\n            finalGrid[i][x].isWall = true;\n        }\n    }\n};\n\nconst innerWalls = (isHorz, minX, maxX, minY, maxY) => {\n    if (isHorz) {\n        if (maxX - minX < 2) {\n            return;\n        }\n        const y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n        generateHorizontal(minX, maxX, y);\n        innerWalls(false, minX, maxX, minY, y - 1);\n        innerWalls(false, minX, maxX, y + 1, maxY);\n    } else {\n        if (maxY - minY < 2) {\n            return;\n        }\n        const x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n        generateVertical(minY, maxY, x);\n        innerWalls(true, minX, x - 1, minY, maxY);\n        innerWalls(true, x + 1, maxX, minY, maxY);\n    }\n};\n\nconst gridGenerator = (nodes) => {\n    finalGrid = nodes;\n    outerWalls(finalGrid);\n    innerWalls(true, 1, nodes.length - 2, 1, nodes.length - 2);\n    return finalGrid;\n};\n\nexport default gridGenerator;\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events, jsx-a11y/control-has-associated-label */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Node.css\";\n\nclass Node extends React.PureComponent {\n    renderNode() {\n        const {\n            name,\n            isPath,\n            isWall,\n            onMouseDown,\n            onMouseUp,\n            row,\n            col,\n            onMouseEnter,\n        } = this.props;\n        const wall = isWall ? \"wall\" : \"\";\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            />\n        );\n    }\n\n    renderStart() {\n        const {\n            name,\n            isPath,\n            isWall,\n            onMouseDown,\n            onMouseUp,\n            row,\n            col,\n            onMouseEnter,\n        } = this.props;\n        const wall = isWall ? \"wall\" : \"\";\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-house-fill align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 3.293l6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\"\n                    />\n                </svg>\n            </div>\n        );\n    }\n\n    renderTarget() {\n        const {\n            name,\n            isPath,\n            isWall,\n            onMouseDown,\n            onMouseUp,\n            row,\n            col,\n            onMouseEnter,\n        } = this.props;\n        const wall = isWall ? \"wall\" : \"\";\n        return (\n            <div\n                tabIndex=\"0\"\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={() => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-bullseye target align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z\"\n                    />\n                    <path d=\"M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                </svg>\n            </div>\n        );\n    }\n\n    render() {\n        const { isTarget, isStart } = this.props;\n        if (isTarget) {\n            return this.renderTarget();\n        }\n        if (isStart) {\n            return this.renderStart();\n        }\n        return this.renderNode();\n    }\n}\n\nNode.propTypes = {\n    name: PropTypes.string.isRequired,\n    isPath: PropTypes.bool.isRequired,\n    row: PropTypes.string.isRequired,\n    col: PropTypes.string.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n    isWall: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    isTarget: PropTypes.bool.isRequired,\n    isStart: PropTypes.bool.isRequired,\n};\n\nexport default Node;\n","// [List-of Node] => Graph\nconst toGraph = (nodeArray) => {\n    const graph = {};\n    for (let i = 0; i < nodeArray.length; i += 1) {\n        for (let j = 0; j < nodeArray[i].length; j += 1) {\n            if (!nodeArray[i][j].isWall) {\n                const nodeName = nodeArray[i][j].name;\n                const neighbors = {};\n                const top = i !== 0 ? nodeArray[i - 1][j] : null;\n                const bottom =\n                    i !== nodeArray.length - 1 ? nodeArray[i + 1][j] : null;\n                const left = j !== 0 ? nodeArray[i][j - 1] : null;\n                const right =\n                    j !== nodeArray[i].length - 1 ? nodeArray[i][j + 1] : null;\n                if (left && !left.isWall) {\n                    neighbors[left.name] = 1;\n                }\n                if (right && !right.isWall) {\n                    neighbors[right.name] = 1;\n                }\n                if (top && !top.isWall) {\n                    neighbors[top.name] = 1;\n                }\n                if (bottom && !bottom.isWall) {\n                    neighbors[bottom.name] = 1;\n                }\n                graph[nodeName] = neighbors;\n            }\n        }\n    }\n    return graph;\n};\n\nexport default toGraph;\n","const closestNode = (distances, visited) => {\n    // Default closest node = null\n    let shortest = null;\n    Object.keys(distances).forEach((node) => {\n        const isShortest =\n            shortest === null || distances[node] < distances[shortest];\n        // If the node isShortest and has not been visited, set shortest equal to the node\n        if (isShortest && !visited.includes(node)) {\n            shortest = node;\n        }\n    });\n    return shortest;\n};\n\nconst dijkstras = (graph, start, target) => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [];\n    }\n    // Creates HashMap for distance from start node to the given node in the object\n    let distances = {};\n    // Distance from target node to start node is Inf\n    distances[target] = Infinity;\n    distances = Object.assign(distances, graph[start]);\n    // Creates a HashMap for parents of each node so we can get the shortest path at the end\n    const parents = { target: null };\n    Object.keys(graph[start]).forEach((child) => {\n        parents[child] = start;\n    });\n    // Array of visited nodes\n    const visited = [];\n    // CurrentNode is equal to the closest Node to the start node\n    let currentNode = closestNode(distances, visited);\n    while (currentNode && currentNode !== target) {\n        const distance = distances[currentNode];\n        const children = graph[currentNode];\n        const childrenArr = Object.keys(children);\n        // For all the children of the current node\n        for (let child = 0; child < childrenArr.length; child += 1) {\n            // If the child isn't the start node, the distance from the start to the child node is newDistance\n            if (childrenArr[child] !== start) {\n                const newDistance = distance + children[childrenArr[child]];\n                // If there isn't a distance from the start to the child or if that distance is greater than newDistance\n                if (\n                    !distances[childrenArr[child]] ||\n                    distances[childrenArr[child]] > newDistance\n                ) {\n                    // Set that distance to newDistance and let the parent of that node be curreneNode\n                    distances[childrenArr[child]] = newDistance;\n                    parents[childrenArr[child]] = currentNode;\n                }\n            }\n        }\n        // Append the currentNode to visited and change it to the closest unvisited node\n        visited.push(currentNode);\n        currentNode = closestNode(distances, visited);\n    }\n    // Go in reverse from target node to start and save that to the shortestPath\n    const shortestPath = [target];\n    let parent = parents[target];\n    while (parent) {\n        shortestPath.push(parent);\n        parent = parents[parent];\n    }\n    shortestPath.reverse();\n    return [shortestPath, visited];\n};\n\nexport default dijkstras;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ControlPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colStart: 2,\n            colEnd: 20,\n            rowStart: 2,\n            rowEnd: 20,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    handleInputChange(e) {\n        const { changeStart, changeTarget } = this.props;\n        const { target } = e;\n        const { name } = target;\n        this.setState(\n            {\n                [name]: Number(target.value),\n            },\n            () => {\n                const { colStart, colEnd, rowEnd, rowStart } = this.state;\n                if (name === \"colStart\" || name === \"rowStart\") {\n                    changeStart(colStart, rowStart);\n                } else {\n                    changeTarget(colEnd, rowEnd);\n                }\n            }\n        );\n    }\n\n    handleSubmit(e) {\n        const { visualize } = this.props;\n        const { rowEnd, colEnd, rowStart, colStart } = this.state;\n        visualize(rowStart, colStart, rowEnd, colEnd);\n        e.preventDefault();\n    }\n\n    reset() {\n        const { resetGrid } = this.props;\n        this.setState({ colEnd: 20, colStart: 2, rowStart: 2, rowEnd: 20 });\n        resetGrid();\n    }\n\n    render() {\n        const {\n            isButtonDisabled,\n            generateGrid,\n            generateGridDisabled,\n        } = this.props;\n        return (\n            <div className=\"row my-3 justify-content-center input-group\">\n                <div className=\"input-group-prepend\">\n                    <span id=\"startcol\" className=\"input-group-text\">\n                        Start Col | End col | Start row | End row\n                    </span>\n                </div>\n                <input\n                    type=\"number\"\n                    name=\"colStart\"\n                    max=\"21\"\n                    min=\"1\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"21\"\n                    min=\"1\"\n                    name=\"colEnd\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"21\"\n                    min=\"1\"\n                    name=\"rowStart\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max=\"21\"\n                    min=\"1\"\n                    name=\"rowEnd\"\n                    className=\"form-control\"\n                    onChange={this.handleInputChange}\n                />\n                <button\n                    onClick={this.handleSubmit}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isButtonDisabled}\n                >\n                    Press to graph\n                </button>\n                <button\n                    onClick={generateGrid}\n                    disabled={generateGridDisabled}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                >\n                    Press for grid\n                </button>\n                <button\n                    onClick={this.reset}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                >\n                    Reset\n                </button>\n            </div>\n        );\n    }\n}\n\nControlPanel.propTypes = {\n    visualize: PropTypes.func.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired,\n    changeStart: PropTypes.func.isRequired,\n    changeTarget: PropTypes.func.isRequired,\n    generateGrid: PropTypes.func.isRequired,\n    generateGridDisabled: PropTypes.bool.isRequired,\n    resetGrid: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import React from \"react\";\nimport Node from \"../Node/Node\";\nimport \"./App.css\";\nimport toGraph from \"../util/toGraph\";\nimport dijkstras from \"../util/dijkstra\";\nimport ControlPanel from \"../ControlPanel/ControlPanel\";\nimport gridGenerator from \"../util/gridGenerator\";\n\nconst SIZE = 21;\n\nconst createNode = (col, row) => {\n    return {\n        isPath: false,\n        name: `col${col + 1}row${row + 1}`,\n        col: col + 1,\n        row: row + 1,\n        isWall: false,\n        isStart: false,\n        isTarget: false,\n    };\n};\n\nconst getInitialNodes = () => {\n    const nodes = [];\n    for (let i = 0; i < SIZE; i += 1) {\n        const row = [];\n        for (let j = 0; j < SIZE; j += 1) {\n            if (i === 1 && j === 1) {\n                const start = createNode(j, i);\n                start.isStart = true;\n                row.push(start);\n            } else if (i === SIZE - 2 && j === SIZE - 2) {\n                const target = createNode(j, i);\n                target.isTarget = true;\n                row.push(target);\n            } else {\n                row.push(createNode(j, i));\n            }\n        }\n        nodes.push(row);\n    }\n    return nodes;\n};\n\nconst graphWithAddedRemovedWall = (nodes, row, col) => {\n    const newNodes = nodes;\n    newNodes[row - 1][col - 1].isWall = !newNodes[row - 1][col - 1].isWall;\n    return newNodes;\n};\n\nconst removeVisited = (nodes) => {\n    for (let i = 0; i < SIZE; i += 1) {\n        for (let j = 0; j < SIZE; j += 1) {\n            if (nodes[i][j].isWall) {\n                document.getElementById(nodes[i][j].name).className =\n                    \"Node wall false\";\n            } else {\n                document.getElementById(nodes[i][j].name).className =\n                    \"Node false\";\n            }\n        }\n    }\n};\n\nconst animate = (visited, path) => {\n    if (visited === undefined) {\n        return;\n    }\n    for (let i = 0; i <= visited.length; i += 1) {\n        if (i === visited.length) {\n            for (let j = 0; j < path.length; j += 1) {\n                setTimeout(() => {\n                    document.getElementById(path[j]).className = `Node true`;\n                }, 15 * i + 30 * j);\n            }\n            break;\n        } else {\n            setTimeout(() => {\n                document.getElementById(visited[i]).className = `Node visited`;\n            }, 15 * i);\n        }\n    }\n};\n\nconst addTarget = (nodes, cell) => {\n    const newNodes = nodes;\n    for (let i = 0; i < nodes.length; i += 1) {\n        for (let j = 0; j < nodes[i].length; j += 1) {\n            if (nodes[i][j].name === cell) {\n                const target = createNode(j, i);\n                target.isTarget = true;\n                newNodes[i][j] = target;\n            } else if (nodes[i][j].isTarget === true) {\n                newNodes[i][j].isTarget = false;\n            }\n        }\n    }\n    return newNodes;\n};\n\nconst addStart = (nodes, cell) => {\n    const newNodes = nodes;\n    for (let i = 0; i < nodes.length; i += 1) {\n        for (let j = 0; j < nodes[i].length; j += 1) {\n            if (nodes[i][j].name === cell) {\n                const start = createNode(j, i);\n                start.isStart = true;\n                newNodes[i][j] = start;\n            } else if (nodes[i][j].isStart === true) {\n                newNodes[i][j].isStart = false;\n            }\n        }\n    }\n    return newNodes;\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [],\n            isMouseDown: false,\n            isButtonDisabled: false,\n            generateGridDisabled: false,\n        };\n        this.handleOnMouseDown = this.handleOnMouseDown.bind(this);\n        this.handleOnMouseEnter = this.handleOnMouseEnter.bind(this);\n        this.handleOnMouseUp = this.handleOnMouseUp.bind(this);\n        this.visualize = this.visualize.bind(this);\n        this.changeStart = this.changeStart.bind(this);\n        this.changeTarget = this.changeTarget.bind(this);\n        this.generateGrid = this.generateGrid.bind(this);\n        this.resetGrid = this.resetGrid.bind(this);\n    }\n\n    componentDidMount() {\n        const nodes = getInitialNodes();\n        this.setState({ nodes });\n    }\n\n    // Animation is finished when there is a path on the grid\n    disableUntilAnimationFinishes() {\n        const int = setInterval(() => {\n            if (document.getElementsByClassName(\"Node true\").length !== 0) {\n                this.setState({ isButtonDisabled: false });\n                clearInterval(int);\n            }\n        }, 15);\n    }\n\n    changeStart(colStart, rowStart) {\n        const { nodes } = this.state;\n        const newNodes = addStart(nodes, `col${colStart}row${rowStart}`);\n        this.setState({ nodes: newNodes });\n    }\n\n    changeTarget(colEnd, rowEnd) {\n        const { nodes } = this.state;\n        const newNodes = addTarget(nodes, `col${colEnd}row${rowEnd}`);\n        this.setState({ nodes: newNodes });\n    }\n\n    visualize(rowStart, colStart, rowEnd, colEnd) {\n        const { nodes } = this.state;\n        removeVisited(nodes);\n        const graph = toGraph(nodes);\n        const [path, visited] = dijkstras(\n            graph,\n            `col${colStart}row${rowStart}`,\n            `col${colEnd}row${rowEnd}`\n        );\n        if (path !== undefined) {\n            this.setState({ isButtonDisabled: true });\n        }\n        animate(visited, path);\n        this.disableUntilAnimationFinishes();\n    }\n\n    handleOnMouseDown(row, col) {\n        const { nodes } = this.state;\n        const newNodes = graphWithAddedRemovedWall(nodes, row, col);\n        this.setState({ nodes: newNodes, isMouseDown: true });\n    }\n\n    handleOnMouseUp() {\n        this.setState({ isMouseDown: false });\n    }\n\n    handleOnMouseEnter(row, col) {\n        const { isMouseDown, nodes } = this.state;\n        if (isMouseDown) {\n            const newNodes = graphWithAddedRemovedWall(nodes, row, col);\n            this.setState({ nodes: newNodes });\n        }\n    }\n\n    generateGrid() {\n        const { nodes } = this.state;\n        const newNodes = gridGenerator(nodes);\n        this.setState({ nodes: newNodes, generateGridDisabled: true });\n    }\n\n    resetGrid() {\n        const newNodes = getInitialNodes();\n        this.setState({ nodes: newNodes, generateGridDisabled: false }, () => {\n            const gridArray = document.getElementById(\"grid-container\")\n                .children;\n            for (let i = 0; i < gridArray.length; i += 1) {\n                gridArray[i].className = \"Node false\";\n            }\n        });\n    }\n\n    render() {\n        const { nodes, isButtonDisabled, generateGridDisabled } = this.state;\n        return (\n            <div className=\"App container\">\n                <ControlPanel\n                    isButtonDisabled={isButtonDisabled}\n                    visualize={this.visualize}\n                    changeStart={this.changeStart}\n                    changeTarget={this.changeTarget}\n                    generateGrid={this.generateGrid}\n                    generateGridDisabled={generateGridDisabled}\n                    resetGrid={this.resetGrid}\n                />\n                <div\n                    role=\"button\"\n                    tabIndex=\"0\"\n                    id=\"grid-container\"\n                    className=\"grid-container row justify-content-center\"\n                >\n                    {nodes.map((l) => {\n                        return l.map((node) => {\n                            const {\n                                isPath,\n                                name,\n                                row,\n                                col,\n                                isWall,\n                                isTarget,\n                                isStart,\n                            } = node;\n                            return (\n                                <Node\n                                    isPath={isPath}\n                                    name={name}\n                                    row={row}\n                                    col={col}\n                                    isWall={isWall}\n                                    isTarget={isTarget}\n                                    isStart={isStart}\n                                    onMouseDown={\n                                        () => this.handleOnMouseDown(row, col)\n                                        // eslint-disable-next-line\n                                    }\n                                    onMouseUp={this.handleOnMouseUp}\n                                    onMouseEnter={\n                                        () => this.handleOnMouseEnter(row, col)\n                                        // eslint-disable-next-line\n                                    }\n                                />\n                            );\n                        });\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}