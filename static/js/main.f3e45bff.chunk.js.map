{"version":3,"sources":["util/toGraph.ts","util/dijkstra.ts","ControlPanel/ControlPanel.tsx","util/gridGenerator.ts","Node/Node.tsx","GridContainer/GridContainer.tsx","util/astar.ts","App/App.tsx","serviceWorker.js","index.js"],"names":["toGraph","nodeArray","graph","i","length","j","isWall","nodeName","name","neighbors","top","bottom","left","right","closestNode","distances","visited","shortest","Object","keys","forEach","node","includes","dijkstras","start","target","undefined","Infinity","assign","parents","child","currentNode","distance","children","childrenArr","newDistance","push","shortestPath","parent","reverse","ControlPanel","finalGrid","props","useState","colStart","setColStart","SIZE","colEnd","setColEnd","rowStart","setRowStart","rowEnd","setRowEnd","alogrithm","setAlgorithm","changeStart","changeTarget","isButtonDisabled","visualize","generateGrid","generateGridDisabled","resetGrid","changeAlgorithm","useInputChange","e","val","Number","value","id","className","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","currentTarget","innerHTML","placeholder","max","min","onChange","preventDefault","disabled","randomNumber","Math","floor","random","innerWalls","isHorz","minX","maxX","minY","maxY","y","door","generateHorizontal","x","generateVertical","gridGenerator","nodes","newNodes","outerWalls","Node","isPath","onMouseDown","onMouseUp","row","col","onMouseEnter","isVisited","isTarget","isStart","wall","tabIndex","role","width","height","viewBox","fill","xmlns","fillRule","d","GridContainer","PropTypes","arrayOf","any","isRequired","func","forwardRef","ref","map","l","manhattanHeuristic","match","colTarget","rowTarget","abs","reconstructPath","cameFrom","current","path","curr","unshift","aStar","openSet","gScore","fScore","currentIdx","indexOf","splice","tentativeGScore","createNode","getInitialNodes","App","setNodes","isMouseDown","setIsMouseDown","setIsButtonDisabled","setGenerateGridDisabled","useReducer","forceUpdate","algrorithm","setAlgroithm","gridRef","useRef","useEffect","graphWithAddedRemovedWall","removeVisited","setTimeout","childArr","findIndex","elem","animate","time","disableUntilAnimationFinishes","cell","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3e45bff.chunk.js","sourcesContent":["import Node from \"../NodeInterface\";\n\nconst toGraph = (\n    nodeArray: Array<Array<Node>>\n): { [index: string]: { [index: string]: number } } => {\n    const graph: { [index: string]: { [index: string]: number } } = {};\n    for (let i = 0; i < nodeArray.length; i += 1) {\n        for (let j = 0; j < nodeArray[i].length; j += 1) {\n            if (!nodeArray[i][j].isWall) {\n                const nodeName = nodeArray[i][j].name;\n                const neighbors: { [index: string]: number } = {};\n                const top = i !== 0 ? nodeArray[i - 1][j] : null;\n                const bottom =\n                    i !== nodeArray.length - 1 ? nodeArray[i + 1][j] : null;\n                const left = j !== 0 ? nodeArray[i][j - 1] : null;\n                const right =\n                    j !== nodeArray[i].length - 1 ? nodeArray[i][j + 1] : null;\n                if (left && !left.isWall) {\n                    neighbors[left.name] = 1;\n                }\n                if (right && !right.isWall) {\n                    neighbors[right.name] = 1;\n                }\n                if (top && !top.isWall) {\n                    neighbors[top.name] = 1;\n                }\n                if (bottom && !bottom.isWall) {\n                    neighbors[bottom.name] = 1;\n                }\n                graph[nodeName] = neighbors;\n            }\n        }\n    }\n    return graph;\n};\n\nexport default toGraph;\n","const closestNode = (\n    distances: { [index: string]: number },\n    visited: Array<string>\n): string | null => {\n    // Default closest node = null\n    let shortest: string | null = null;\n    Object.keys(distances).forEach((node) => {\n        const isShortest =\n            shortest === null || distances[node] < distances[shortest];\n        // If the node isShortest and has not been visited, set shortest equal to the node\n        if (isShortest && !visited.includes(node)) {\n            shortest = node;\n        }\n    });\n    return shortest;\n};\n\nconst dijkstras = (\n    graph: { [index: string]: { [index: string]: number } },\n    start: string,\n    target: string\n): [string[], string[]] | [undefined, undefined] => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [undefined, undefined];\n    }\n    // Creates HashMap for distance from start node to the given node in the object\n    let distances: { [index: string]: number } = {};\n    // Distance from target node to start node is Inf\n    distances[target] = Infinity;\n    distances = Object.assign(distances, graph[start]);\n    // Creates a HashMap for parents of each node so we can get the shortest path at the end\n    const parents: { [index: string]: string | null } = { target: null };\n    Object.keys(graph[start]).forEach((child) => {\n        parents[child] = start;\n    });\n    // Array of visited nodes\n    const visited: Array<string> = [];\n    // CurrentNode is equal to the closest Node to the start node\n    let currentNode = closestNode(distances, visited);\n    while (currentNode && currentNode !== target) {\n        const distance = distances[currentNode];\n        const children = graph[currentNode];\n        const childrenArr = Object.keys(children);\n        // For all the children of the current node\n        for (let child = 0; child < childrenArr.length; child += 1) {\n            // If the child isn't the start node, the distance from the start to the child node is newDistance\n            if (childrenArr[child] !== start) {\n                const newDistance = distance + children[childrenArr[child]];\n                // If there isn't a distance from the start to the child or if that distance is greater than newDistance\n                if (\n                    !distances[childrenArr[child]] ||\n                    distances[childrenArr[child]] > newDistance\n                ) {\n                    // Set that distance to newDistance and let the parent of that node be curreneNode\n                    distances[childrenArr[child]] = newDistance;\n                    parents[childrenArr[child]] = currentNode;\n                }\n            }\n        }\n        // Append the currentNode to visited and change it to the closest unvisited node\n        visited.push(currentNode);\n        currentNode = closestNode(distances, visited);\n    }\n    // Go in reverse from target node to start and save that to the shortestPath\n    const shortestPath = [target];\n    let parent = parents[target];\n    while (parent) {\n        shortestPath.push(parent);\n        parent = parents[parent];\n    }\n    shortestPath.reverse();\n    return [shortestPath, visited];\n};\n\nexport default dijkstras;\n","import React, { useState } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nconst SIZE = 31;\n\nfunction ControlPanel(\n    props: InferProps<typeof ControlPanel.propTypes>\n): JSX.Element {\n    const [colStart, setColStart] = useState(2);\n    const [colEnd, setColEnd] = useState(SIZE - 1);\n    const [rowStart, setRowStart] = useState(2);\n    const [rowEnd, setRowEnd] = useState(SIZE - 1);\n    const [alogrithm, setAlgorithm] = useState(\"Dijkstra's\");\n\n    const {\n        changeStart,\n        changeTarget,\n        isButtonDisabled,\n        visualize,\n        generateGrid,\n        generateGridDisabled,\n        resetGrid,\n        changeAlgorithm,\n    } = props;\n\n    const useInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { target } = e;\n        const { name } = target;\n        const val = Number(target.value);\n        if (name === \"colStart\") {\n            setColStart(val);\n            changeStart(val, rowStart);\n        } else if (name === \"rowStart\") {\n            setRowStart(val);\n            changeStart(colStart, val);\n        } else if (name === \"colEnd\") {\n            setColEnd(val);\n            changeTarget(val, rowEnd);\n        } else {\n            setRowEnd(val);\n            changeTarget(colEnd, val);\n        }\n    };\n\n    const handleSubmit = (e: React.FormEvent<HTMLButtonElement>): void => {\n        visualize(rowStart, colStart, rowEnd, colEnd);\n        e.preventDefault();\n    };\n\n    const reset = (): void => {\n        setColEnd(SIZE - 1);\n        setColStart(2);\n        setRowStart(2);\n        setRowEnd(SIZE - 1);\n        resetGrid();\n    };\n\n    return (\n        <nav\n            id=\"navbar\"\n            className=\"navbar navbar-expand-lg navbar-dark bg-primary mt-0 mb-3 justify-content-between\"\n        >\n            <h1 className=\"navbar-brand my-0 text-light\">Pathfinder</h1>\n            <div className=\"dropdown show\">\n                <button\n                    className=\"btn btn-primary dropdown-toggle\"\n                    type=\"button\"\n                    id=\"dropdownMenu\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                >\n                    {alogrithm}\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\n                    <button\n                        className=\"dropdown-item\"\n                        type=\"button\"\n                        onClick={(e): void => {\n                            setAlgorithm(e.currentTarget.innerHTML);\n                            changeAlgorithm(e.currentTarget.innerHTML);\n                        }}\n                    >\n                        Dijkstra&apos;s\n                    </button>\n                    <button\n                        className=\"dropdown-item\"\n                        type=\"button\"\n                        onClick={(e): void => {\n                            setAlgorithm(e.currentTarget.innerHTML);\n                            changeAlgorithm(e.currentTarget.innerHTML);\n                        }}\n                    >\n                        A* (Manhattan Heuristic)\n                    </button>\n                </div>\n            </div>\n            <form className=\"form-inline input-group\">\n                <input\n                    type=\"number\"\n                    placeholder=\"Start col\"\n                    name=\"colStart\"\n                    max={SIZE}\n                    min=\"1\"\n                    className=\"form-control\"\n                    onChange={useInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max={SIZE}\n                    placeholder=\"End col\"\n                    min=\"1\"\n                    name=\"colEnd\"\n                    className=\"form-control\"\n                    onChange={useInputChange}\n                />\n                <input\n                    type=\"number\"\n                    placeholder=\"Start row\"\n                    max={SIZE}\n                    min=\"1\"\n                    name=\"rowStart\"\n                    className=\"form-control\"\n                    onChange={useInputChange}\n                />\n                <input\n                    type=\"number\"\n                    max={SIZE}\n                    min=\"1\"\n                    placeholder=\"End row\"\n                    name=\"rowEnd\"\n                    className=\"form-control\"\n                    onChange={useInputChange}\n                />\n                <button\n                    onClick={handleSubmit}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isButtonDisabled}\n                >\n                    Press to graph\n                </button>\n                <button\n                    onClick={generateGrid}\n                    disabled={generateGridDisabled}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                >\n                    Press for grid\n                </button>\n                <button\n                    onClick={reset}\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                >\n                    Reset\n                </button>\n            </form>\n        </nav>\n    );\n}\n\nControlPanel.propTypes = {\n    visualize: PropTypes.func.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired,\n    changeStart: PropTypes.func.isRequired,\n    changeTarget: PropTypes.func.isRequired,\n    generateGrid: PropTypes.func.isRequired,\n    generateGridDisabled: PropTypes.bool.isRequired,\n    resetGrid: PropTypes.func.isRequired,\n    changeAlgorithm: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import Node from \"../NodeInterface\";\n\nlet finalGrid: Array<Array<Node>>;\n\n// Generates a random number in this range INCLUSIVE\nconst randomNumber = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst outerWalls = (): void => {\n    const newNodes = finalGrid;\n    for (let i = 0; i < finalGrid.length; i += 1) {\n        for (let j = 0; j < finalGrid[i].length; j += 1) {\n            if (\n                i === 0 ||\n                j === 0 ||\n                j === finalGrid.length - 1 ||\n                i === finalGrid.length - 1\n            ) {\n                newNodes[i][j].isWall = true;\n            }\n        }\n    }\n    finalGrid = newNodes;\n};\n\nconst generateHorizontal = (minX: number, maxX: number, y: number): void => {\n    const door = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n    for (let i = minX; i < maxX; i += 1) {\n        if (i !== door) {\n            finalGrid[y][i].isWall = true;\n        }\n    }\n};\n\nconst generateVertical = (minY: number, maxY: number, x: number): void => {\n    const door = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n    for (let i = minY; i < maxY; i += 1) {\n        if (i !== door) {\n            finalGrid[i][x].isWall = true;\n        }\n    }\n};\n\nconst innerWalls = (\n    isHorz: boolean,\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number\n): void => {\n    if (isHorz) {\n        if (maxX - minX < 2) {\n            return;\n        }\n        const y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n        generateHorizontal(minX, maxX, y);\n        innerWalls(false, minX, maxX, minY, y - 1);\n        innerWalls(false, minX, maxX, y + 1, maxY);\n    } else {\n        if (maxY - minY < 2) {\n            return;\n        }\n        const x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n        generateVertical(minY, maxY, x);\n        innerWalls(true, minX, x - 1, minY, maxY);\n        innerWalls(true, x + 1, maxX, minY, maxY);\n    }\n};\n\nconst gridGenerator = (nodes: Array<Array<Node>>): Array<Array<Node>> => {\n    finalGrid = nodes;\n    outerWalls();\n    innerWalls(true, 1, nodes.length - 2, 1, nodes.length - 2);\n    return finalGrid;\n};\n\nexport default gridGenerator;\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events, jsx-a11y/control-has-associated-label */\n\nimport React from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport \"./Node.css\";\n\nfunction Node(props: InferProps<typeof Node.propTypes>): JSX.Element {\n    const {\n        name,\n        isPath,\n        isWall,\n        onMouseDown,\n        onMouseUp,\n        row,\n        col,\n        onMouseEnter,\n        isVisited,\n        isTarget,\n        isStart,\n    } = props;\n    const wall = isWall ? \"wall\" : \"\";\n    const visited = isVisited ? \"visited\" : \"\";\n\n    const renderNode = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            />\n        );\n    };\n\n    const renderStart = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-house-fill align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 3.293l6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\"\n                    />\n                </svg>\n            </div>\n        );\n    };\n\n    const renderTarget = (): JSX.Element => {\n        return (\n            <div\n                tabIndex={0}\n                role=\"button\"\n                id={name}\n                className={`Node ${isPath} ${wall} ${visited}`}\n                onMouseDown={(): void => onMouseDown(row, col)}\n                onMouseUp={onMouseUp}\n                onMouseEnter={(): void => onMouseEnter(row, col)}\n            >\n                <svg\n                    className=\"bi bi-bullseye target align-baseline\"\n                    width=\"18px\"\n                    height=\"18px\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"#2A9D8F\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10zm0 1A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\"\n                    />\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8z\"\n                    />\n                    <path d=\"M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                </svg>\n            </div>\n        );\n    };\n\n    if (isTarget) {\n        return renderTarget();\n    }\n    if (isStart) {\n        return renderStart();\n    }\n    return renderNode();\n}\n\nNode.propTypes = {\n    name: PropTypes.string.isRequired,\n    isPath: PropTypes.bool.isRequired,\n    row: PropTypes.number.isRequired,\n    col: PropTypes.number.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n    isWall: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    isTarget: PropTypes.bool.isRequired,\n    isStart: PropTypes.bool.isRequired,\n    isVisited: PropTypes.bool.isRequired,\n};\n\nexport default Node;\n","import React, { forwardRef, Ref } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport Node from \"../Node/Node\";\nimport NodeObj from \"../NodeInterface\";\n\nconst GridContainerProps = {\n    nodes: PropTypes.arrayOf(PropTypes.any).isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onMouseUp: PropTypes.func.isRequired,\n};\n\nconst GridContainer = forwardRef(\n    (\n        props: InferProps<typeof GridContainerProps>,\n        ref: Ref<HTMLDivElement>\n    ) => {\n        const { nodes, onMouseDown, onMouseEnter, onMouseUp } = props;\n        return (\n            <div\n                role=\"button\"\n                tabIndex={0}\n                id=\"grid-container\"\n                ref={ref}\n                className=\"grid-container row justify-content-center\"\n            >\n                {nodes.map((l) => {\n                    return l.map((node: NodeObj) => {\n                        const {\n                            isPath,\n                            name,\n                            row,\n                            col,\n                            isWall,\n                            isTarget,\n                            isStart,\n                            isVisited,\n                        } = node;\n                        return (\n                            <Node\n                                isPath={isPath}\n                                name={name}\n                                row={row}\n                                col={col}\n                                isWall={isWall}\n                                isTarget={isTarget}\n                                isStart={isStart}\n                                isVisited={isVisited}\n                                onMouseDown={(): void => onMouseDown(row, col)}\n                                onMouseUp={onMouseUp}\n                                onMouseEnter={\n                                    (): void => onMouseEnter(row, col)\n                                    // eslint-ignore-next-line\n                                }\n                            />\n                        );\n                    });\n                })}\n            </div>\n        );\n    }\n);\n\nexport default GridContainer;\n","const manhattanHeuristic = (start: string, target: string): number => {\n    const colStart = Number(start.match(/(?<=col)\\d*/));\n    const rowStart = Number(start.match(/(?<=row)\\d*/));\n    const colTarget = Number(target.match(/(?<=col)\\d*/));\n    const rowTarget = Number(target.match(/(?<=row)\\d*/));\n    return Math.abs(colTarget - colStart) + Math.abs(rowTarget - rowStart);\n};\n\nconst reconstructPath = (\n    cameFrom: { [index: string]: string },\n    current: string\n): string[] => {\n    const path = [current];\n    let curr = current;\n    while (Object.keys(cameFrom).includes(curr)) {\n        curr = cameFrom[curr];\n        path.unshift(curr);\n    }\n    return path;\n};\n\nconst aStar = (\n    graph: { [index: string]: { [index: string]: number } },\n    start: string,\n    target: string\n): [string[], string[]] | [undefined, undefined] => {\n    if (graph[start] === undefined || graph[target] === undefined) {\n        return [undefined, undefined];\n    }\n    const openSet = [start];\n    const visited = [];\n    const cameFrom: { [index: string]: string } = {};\n    const gScore: { [index: string]: number } = { [start]: 0 };\n    const fScore: { [index: string]: number } = {\n        [start]: manhattanHeuristic(start, target),\n    };\n    while (openSet.length > 0) {\n        let current = openSet[0];\n        for (let i = 0; i < openSet.length; i += 1) {\n            if (fScore[openSet[i]] < fScore[current]) {\n                current = openSet[i];\n            }\n        }\n        if (current === target) {\n            return [reconstructPath(cameFrom, current), visited];\n        }\n        const currentIdx = openSet.indexOf(current);\n        openSet.splice(currentIdx, 1);\n        const neighbors: string[] = Object.keys(graph[current]);\n        for (let i = 0; i < neighbors.length; i += 1) {\n            const tentativeGScore = gScore[current] + 1;\n            if (\n                tentativeGScore < gScore[neighbors[i]] ||\n                gScore[neighbors[i]] === undefined\n            ) {\n                cameFrom[neighbors[i]] = current;\n                gScore[neighbors[i]] = tentativeGScore;\n                fScore[neighbors[i]] =\n                    gScore[neighbors[i]] +\n                    manhattanHeuristic(neighbors[i], target);\n                if (!openSet.includes(neighbors[i])) {\n                    openSet.push(neighbors[i]);\n                }\n            }\n            visited.push(neighbors[i]);\n        }\n    }\n    return [undefined, undefined];\n};\n\nexport default aStar;\n","import React, { useRef, useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport toGraph from \"../util/toGraph\";\nimport dijkstras from \"../util/dijkstra\";\nimport ControlPanel from \"../ControlPanel/ControlPanel\";\nimport gridGenerator from \"../util/gridGenerator\";\nimport GridContainer from \"../GridContainer/GridContainer\";\nimport Node from \"../NodeInterface\";\nimport aStar from \"../util/astar\";\n\nconst SIZE = 31;\n\n// Creates a node object literal\nconst createNode = (col: number, row: number): Node => {\n    return {\n        isPath: false,\n        name: `col${col + 1}row${row + 1}`,\n        col: col + 1,\n        row: row + 1,\n        isWall: false,\n        isStart: false,\n        isTarget: false,\n        isVisited: false,\n    };\n};\n\n// Builds a node array representing the initial state of the grid\nconst getInitialNodes = (): Array<Array<Node>> => {\n    const nodes = [];\n    for (let i = 0; i < SIZE; i += 1) {\n        const row = [];\n        for (let j = 0; j < SIZE; j += 1) {\n            if (i === 1 && j === 1) {\n                const start = createNode(j, i);\n                start.isStart = true;\n                row.push(start);\n            } else if (i === SIZE - 2 && j === SIZE - 2) {\n                const target = createNode(j, i);\n                target.isTarget = true;\n                row.push(target);\n            } else {\n                row.push(createNode(j, i));\n            }\n        }\n        nodes.push(row);\n    }\n    return nodes;\n};\n\nfunction App(): JSX.Element {\n    const [nodes, setNodes] = useState<Array<Array<Node>>>(getInitialNodes());\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n    const [generateGridDisabled, setGenerateGridDisabled] = useState(false);\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\n    const [algrorithm, setAlgroithm] = useState(\"Dijkstra's\");\n    const gridRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n    }, []);\n\n    const chooseAlgo = (): typeof dijkstras => {\n        if (algrorithm === \"Dijkstra's\") {\n            return dijkstras;\n        }\n        return aStar;\n    };\n\n    // Removes all target nodes from the node array and chagnes it to the given cell\n    const changeTarget = (colEnd: number, rowEnd: number): void => {\n        const cell = `col${colEnd}row${rowEnd}`;\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const target = createNode(j, i);\n                    target.isTarget = true;\n                    newNodes[i][j] = target;\n                } else if (nodes[i][j].isTarget === true) {\n                    newNodes[i][j].isTarget = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        // Same with the animations for the walls, only one node out of SIZE**2 nodes is being update so\n        // to animate we have to force a full render\n        forceUpdate();\n    };\n\n    // Removes all start nodes from the node array and changes it to the given cell\n    const changeStart = (colStart: number, rowStart: number): void => {\n        const cell = `col${colStart}row${rowStart}`;\n        const newNodes = nodes;\n        for (let i = 0; i < nodes.length; i += 1) {\n            for (let j = 0; j < nodes[i].length; j += 1) {\n                if (nodes[i][j].name === cell) {\n                    const start = createNode(j, i);\n                    start.isStart = true;\n                    newNodes[i][j] = start;\n                } else if (nodes[i][j].isStart === true) {\n                    newNodes[i][j].isStart = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        forceUpdate();\n    };\n\n    // Removes visited and path nodes inside the list of Nodes\n    const removeVisited = (): Node[][] => {\n        const newNodes = nodes;\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                newNodes[i][j].isPath = false;\n                newNodes[i][j].isVisited = false;\n            }\n        }\n        return newNodes;\n    };\n\n    // Toggles whether or not a node is a wal or not\n    const graphWithAddedRemovedWall = (row: number, col: number): Node[][] => {\n        const newNodes = nodes;\n        newNodes[row - 1][col - 1].isWall = !newNodes[row - 1][col - 1].isWall;\n        return newNodes;\n    };\n\n    // This is where we use the ref for imperative animations\n    const animate = (visited: string[], path: string[]): void => {\n        if (visited === undefined) {\n            return;\n        }\n        for (let i = 0; i <= visited.length; i += 1) {\n            if (i === visited.length) {\n                for (let j = 0; j < path.length; j += 1) {\n                    setTimeout(() => {\n                        if (gridRef && gridRef.current) {\n                            const childArr = [...gridRef.current.children];\n                            childArr[\n                                childArr.findIndex(\n                                    (elem) => elem.id === path[j]\n                                )\n                            ].className = \"Node true\";\n                        }\n                    }, 15 * i + 30 * j);\n                }\n                break;\n            } else {\n                setTimeout(() => {\n                    if (gridRef && gridRef.current) {\n                        const childArr = [...gridRef.current.children];\n                        childArr[\n                            childArr.findIndex((elem) => elem.id === visited[i])\n                        ].className = \"Node visited\";\n                    }\n                }, 15 * i);\n            }\n        }\n    };\n\n    // Animation is finished when there is a path on the grid\n    const disableUntilAnimationFinishes = (time: number): void => {\n        setTimeout(() => {\n            setIsButtonDisabled(false);\n        }, time);\n    };\n\n    const useVisualize = (\n        rowStart: number,\n        colStart: number,\n        rowEnd: number,\n        colEnd: number\n    ): void => {\n        // First, remove all visited nodes from the current grid\n        setNodes(removeVisited());\n        const graph = toGraph(nodes);\n        const algo = chooseAlgo();\n        const [path, visited] = algo(\n            graph,\n            `col${colStart}row${rowStart}`,\n            `col${colEnd}row${rowEnd}`\n        );\n        // Then, if the path is defined, disable the graph button and animte\n        if (path !== undefined && visited !== undefined) {\n            setIsButtonDisabled(true);\n            animate(visited, path);\n            const time = 15 * visited.length + 30 * path.length;\n            // Enable the button after time ms\n            disableUntilAnimationFinishes(time);\n            // TODO: make this it's own function?\n            setTimeout(() => {\n                setNodes(() => {\n                    const newNodes = nodes;\n                    for (let i = 0; i < nodes.length; i += 1) {\n                        for (let j = 0; j < nodes[i].length; j += 1) {\n                            if (path.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isPath = true;\n                            } else if (visited.includes(nodes[i][j].name)) {\n                                newNodes[i][j].isVisited = true;\n                            }\n                        }\n                    }\n                    return newNodes;\n                });\n            }, time);\n        }\n    };\n\n    const handleOnMouseEnter = (row: number, col: number): void => {\n        if (isMouseDown) {\n            const newNodes = graphWithAddedRemovedWall(row, col);\n            setNodes(newNodes);\n            // Typically forceUpdate isn't good to call, but with these hooks, too little of the nodes array is changing\n            // to justify a complete rerender, but that's needed to animate the walls on a mouseover\n            forceUpdate();\n        }\n    };\n\n    // TODO: combine these functions with the function up top\n    const handleOnMouseDown = (row: number, col: number): void => {\n        const newNodes = graphWithAddedRemovedWall(row, col);\n        setNodes(newNodes);\n        setIsMouseDown(true);\n    };\n\n    const handleOnMouseUp = (): void => {\n        setIsMouseDown(false);\n    };\n\n    // Generates a grid using recursive division\n    const generateGrid = (): void => {\n        const newNodes = gridGenerator(nodes);\n        for (let i = 0; i < SIZE; i += 1) {\n            for (let j = 0; j < SIZE; j += 1) {\n                if (newNodes[i][j].isPath) {\n                    newNodes[i][j].isPath = false;\n                }\n                if (newNodes[i][j].isVisited) {\n                    newNodes[i][j].isVisited = false;\n                }\n            }\n        }\n        setNodes(newNodes);\n        setGenerateGridDisabled(true);\n    };\n\n    // Resets the grid to initial state\n    const resetGrid = (): void => {\n        const newNodes = getInitialNodes();\n        setNodes(newNodes);\n        setGenerateGridDisabled(false);\n        // After setting the className during the animate function, we have to reset it\n        // through a manual DOM update over here\n        if (gridRef && gridRef.current) {\n            for (let i = 0; i < gridRef.current.children.length; i += 1) {\n                gridRef.current.children[i].className = \"Node false\";\n            }\n        }\n    };\n\n    return (\n        <div className=\"container-fullwidth\">\n            <ControlPanel\n                isButtonDisabled={isButtonDisabled}\n                visualize={useVisualize}\n                changeStart={changeStart}\n                changeTarget={changeTarget}\n                generateGrid={generateGrid}\n                generateGridDisabled={generateGridDisabled}\n                resetGrid={resetGrid}\n                changeAlgorithm={setAlgroithm}\n            />\n            <GridContainer\n                onMouseEnter={handleOnMouseEnter}\n                onMouseUp={handleOnMouseUp}\n                onMouseDown={handleOnMouseDown}\n                ref={gridRef}\n                nodes={nodes}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker.js\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}